تقرير شرح الكود

الاسم: باسل محمد الحمود

مقدمة

الكود مكتوب بلغة C# بهدف إنشاء برنامج لإدارة قائمة مهام (To-Do List).
البرنامج يتيح للمستخدم إضافة مهام جديدة، عرض المهام الحالية، حذفها، ترتيبها حسب الأولوية أو التاريخ، إنهاء المهام ونقلها إلى قائمة خاصة بالمهام المنجزة، إضافةً إلى دعم المهام العاجلة باستخدام قائمة انتظار.

⸻

شرح المكوّنات الأساسية
	•	TaskItem
كلاس تمثل المهمة العادية وتحتوي على:
	•	Title: اسم المهمة.
	•	Priority: أولوية المهمة (1 عالي – 2 متوسط – 3 منخفض).
	•	CreatedAt: تاريخ ووقت إدخال المهمة.
	•	DoneTaskNode
عقدة (Node) في قائمة مرتبطة (Linked List) للمهام المنجزة.
تحتوي على:
	•	المهمة نفسها (Task).
	•	مؤشر (Next) للعقدة التالية.
	•	tasks[]
مصفوفة بحجم 100 عنصر لتخزين المهام النشطة (التي لم تُنجز بعد).
	•	doneHead
متغير يشير إلى بداية القائمة المرتبطة الخاصة بالمهام المنجزة.
	•	urgentTasks
قائمة انتظار (Queue) خاصة بالمهام العاجلة، تعمل بمبدأ FIFO (الأول يدخل هو الأول يخرج).

⸻

العمليات الرئيسية في البرنامج
	1.	إضافة مهمة جديدة
	•	يطلب من المستخدم اسم المهمة وأولويتها.
	•	يتم إدخالها في المصفوفة tasks[].
	2.	عرض المهام
	•	إظهار قائمة المهام النشطة مع تفاصيلها (العنوان – الأولوية – التاريخ).
	3.	حذف مهمة
	•	اختيار رقم مهمة معينة وحذفها من المصفوفة.
	4.	ترتيب المهام
	•	يمكن ترتيبها حسب الأولوية أو حسب تاريخ الإضافة.
	5.	إنهاء مهمة
	•	نقل مهمة من قائمة المهام النشطة إلى قائمة المهام المنجزة (القائمة المرتبطة).
	6.	عرض المهام المنجزة
	•	استعراض المهام التي تم إنهاؤها.
	7.	إضافة مهمة عاجلة
	•	إدخال مهمة في قائمة الانتظار الخاصة بالمهام العاجلة.
	8.	عرض المهام العاجلة
	•	عرض جميع المهام الموجودة في قائمة الانتظار بالترتيب الذي تمت إضافتها فيه.

⸻

الخاتمة

الكود يمثل تطبيق عملي على هياكل البيانات:
	•	المصفوفة (لتخزين المهام النشطة).
	•	القائمة المرتبطة (لتخزين المهام المنجزة).
	•	قائمة الانتظار (للمهام العاجلة).

وبذلك يعطي مثالاً واقعياً على كيفية استخدام هياكل البيانات في حل مشكلة تنظيم وإدارة المهام بشكل عملي.
